---
description: Python language specific set of rules
globs:
alwaysApply: true
---

**Python-Specific Instructions:**

1.  **Formatting:** All code must adhere to PEP 8 standards. Use `black` or `ruff` for formatting if the project uses it.
    Why: Consistent formatting improves readability and reduces merge conflicts.
2.  **Typing:** Use modern type hints (`typing` module) for all function signatures.
    Why: Type hints improve code clarity and enable better tooling.
    Example:
      def add(x: int, y: int) -> int:
          return x + y
3.  **Dependencies:** Manage dependencies through `requirements.txt` or, preferably, `pyproject.toml` with Poetry or PDM. Always use `uv` for installing and managing dependencies instead of `pip`.
    Why: `uv` is faster, more reliable, and provides better dependency resolution than `pip`.
    Example:
      uv pip install -r requirements.txt
4.  **Virtual Environments:** Assume code will be run within a virtual environment. Do not suggest global package installations.
    Why: Prevents dependency conflicts and system pollution.
5.  **Idioms:** Write Pythonic code (e.g., use comprehensions, context managers).
    Why: Pythonic code is more efficient and easier to maintain.
    Example:
      with open('file.txt') as f:
          data = [line.strip() for line in f]
